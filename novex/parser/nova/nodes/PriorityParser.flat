package novex/parser/nova/nodes

import novex/astro/SyntaxErrorException
import novex/astro/InvalidParseException
import novex/astro/util/Location

import novex/astro/util/CompilerStringFunctions

/// @Value extension that represents
///
/// author: Braden Steffaniak
/// since:
/// version:
class PriorityParser extends ValueParser implements AccessibleParser {
        /// Parse the given input into a Priority node. If the input cannot be parsed
        /// into a Priority node, null is returned.
        ///
        /// #exampleInputs:
        ///         Example inputs:
        ///            *
        ///            *
        ///            *
        ///
        /// input:        The input string to parse into a Priority instance.
        /// parent:     The parent of the Priority node.
        /// location: The location of the input text in the source file.
        /// require:    Whether or not to throw a syntax error if the input could not
        ///                     be parsed.
        /// return:     The parsed Priority node, if successful; null otherwise.
        public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Priority => null {
                if (input.first == '(' && input.last == ')') {
                        var node = Priority(parent, location)
                        var value = input.substring(1, input.count - 1).trim()

                        if (!parseValue(node, value)) {
                                toss InvalidParseException("Invalid value '#value'", node)
                        } else {
                                return node
                        }
                }
        }

        static parseValue(Priority node, String input) =>
                node.value = ValueParser.parse(input, node)
}