package "novex/parser/nova/nodes"

import "nova/datastruct/HashMap"

import "novex/astro/util/Location"
import "novex/astro/SyntaxMessage"

import "novex/astro/util/CompilerStringFunctions"

class PackageParser extends NodeParser {
    /// Parse the given input into a Package node. If the input cannot be parsed
    /// into a Package node, null is returned.
    ///
    /// #exampleInputs:
    ///     Example inputs:
    ///      * package "nova/datastruct/list"
    ///      * package "nova/datastruct"
    ///      * package "nova"
    ///
    /// input:    The input string to parse into a Package instance.
    /// parent:   The parent of the Package node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed Package node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Package => null {
        if (input.firstWord == "package") {
            var node = Package(parent, location)

            var quoteStart = input.nextNonWhitespaceIndex("package".count)

            if (quoteStart < 0 || input[quoteStart] != '"') {
                return null
            }

            var quoteEnd = input.findEndingChar('"', quoteStart)

            if (quoteEnd < 0) {
                SyntaxMessage.error("Missing ending quotation for Package statement", node)
            }

            var packageLocation = input.substring(quoteStart + 1, quoteEnd)

            node.location = packageLocation

            if (node.validateLocation() && node.validateAlias()) {
                filesMap.add(node.location, filesMap.get(node.location) ?: new NovaFile[])
                filesMap[node.location].add(parent.parentFile)

                return node
            }
        }
    }
}